# Define build steps
steps:
  # Stage 1: Get Flutter Dependencies
  - name: 'ghcr.io/cirruslabs/flutter:stable'
    id: 'flutter-dependencies'
    entrypoint: 'flutter'
    args: ['pub', 'get']

  # Stage 2: Setup Android Signing
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'setup-android-signing'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Setting up Android signing..."
        
        # Create keystore directory
        mkdir -p android/app
        
        # Get keystore from Secret Manager
        gcloud secrets versions access latest --secret="android-keystore" --out-file="android/app/laennec-ai-release-key.jks"
        
        # Verify keystore exists
        if [ ! -f "android/app/laennec-ai-release-key.jks" ]; then
          echo "Error: Keystore file not found"
          exit 1
        fi
        
        echo "Android signing setup complete"
        ls -la android/app/laennec-ai-release-key.jks
    waitFor: ['flutter-dependencies']

  # Stage 3: Run Flutter Tests
  - name: 'ghcr.io/cirruslabs/flutter:stable'
    id: 'flutter-test'
    entrypoint: 'flutter'
    args: ['test']
    waitFor: ['setup-android-signing']

  # Stage 4: Build Android App Bundle
  - name: 'ghcr.io/cirruslabs/flutter:stable'
    id: 'build-android-release'
    entrypoint: 'flutter'
    args: ['build', 'appbundle', '--release']
    waitFor: ['flutter-test']

  # Stage 5: Prepare Release Artifacts
  - name: 'bash'
    id: 'prepare-release'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        mkdir -p artifacts
        cp build/app/outputs/bundle/release/app-release.aab artifacts/
        echo "${_VERSION_PREFIX}-$(date +%Y%m%d)-$BUILD_ID" > artifacts/version.txt
        echo "Building version: $(cat artifacts/version.txt)"
    waitFor: ['build-android-release']

  # Stage 6: Upload to Cloud Storage
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'upload-to-storage'
    args:
      - 'cp'
      - 'artifacts/app-release.aab'
      - 'gs://${_BUCKET_NAME}/releases/${_VERSION_PREFIX}-${BUILD_ID}.aab'
    waitFor: ['prepare-release']

  # Stage 7: Get Play Store Credentials
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'fetch-playstore-key'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Fetching Play Store service account key..."
        
        # Create directory for key
        mkdir -p /workspace/keys
        
        # Fetch and save the key with debug output
        echo "Attempting to fetch secret..."
        gcloud secrets versions access latest --secret="playstore-credentials" > /workspace/keys/raw_key.json
        
        # Check if file exists and has content
        if [ ! -s /workspace/keys/raw_key.json ]; then
          echo "Error: Key file is empty"
          exit 1
        fi
        
        # Display file info (without showing sensitive content)
        echo "Key file info:"
        ls -l /workspace/keys/raw_key.json
        
        # Try to format the JSON (this will validate it)
        echo "Attempting to format JSON..."
        if ! cat /workspace/keys/raw_key.json | python3 -m json.tool > /workspace/keys/formatted_key.json 2>/dev/null; then
          echo "Error: Invalid JSON format"
          echo "First few characters of file (for debugging):"
          head -c 50 /workspace/keys/raw_key.json
          exit 1
        fi
        
        # Move the formatted key to final location
        mv /workspace/keys/formatted_key.json key.json
        chmod 600 key.json
        
        echo "Successfully processed Play Store credentials"
        echo "Final key file info:"
        ls -l key.json
    waitFor: ['prepare-release']

  # Stage 8: Deploy to Play Store
  - name: 'ruby:3.1'
    id: 'deploy-to-playstore'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        
        echo "Installing required gems..."
        gem install bundler fastlane -N

        echo "Creating Fastfile..."
        mkdir -p fastlane
        cat > fastlane/Fastfile <<EOF
        default_platform(:android)
        platform :android do
          desc "Upload to Play Store Internal Track"
          lane :deploy_internal do
            upload_to_play_store(
              json_key: "key.json",
              package_name: "com.laennecai.healthassistant",
              track: "internal",
              aab: "artifacts/app-release.aab",
              release_status: "draft",
              validate_only: true  # First validate without uploading
            )
            
            # If validation succeeds, do the actual upload
            upload_to_play_store(
              json_key: "key.json",
              package_name: "com.laennecai.healthassistant",
              track: "internal",
              aab: "artifacts/app-release.aab",
              release_status: "completed"
            )
          end
        end
        EOF

        echo "Verifying key.json exists and is readable..."
        if [ ! -f key.json ]; then
          echo "Error: key.json not found"
          exit 1
        fi

        echo "Verifying AAB exists..."
        if [ ! -f artifacts/app-release.aab ]; then
          echo "Error: app-release.aab not found"
          ls -la artifacts/
          exit 1
        fi

        echo "Running Fastlane..."
        fastlane android deploy_internal
    waitFor: ['upload-to-storage', 'fetch-playstore-key']

# Define timeout
timeout: '1800s'  # 30 minutes

# Define substitutions
substitutions:
  _BUCKET_NAME: 'chatbot_laennec_geo'
  _VERSION_PREFIX: '1.0.3'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Tags
tags:
  - 'flutter'
  - 'Laennec AI Health Assistant'
  - 'android'

# Add trigger configuration
trigger:
  event: 'push'
  branch: 'main'